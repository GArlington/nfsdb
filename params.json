{"name":"NFSdb","tagline":"Don't let your past hold you back","body":"[![Build Status](https://secure.travis-ci.org/NFSdb/nfsdb.png?branch=master)](http://travis-ci.org/NFSdb/nfsdb)\r\n---\r\n\r\n\r\n##What is NFSdb?\r\n\r\nNFSdb is a java library that lets you easily persist huge volumes of POJOs on disk with almost zero GC overhead and minimal latency (millions of writes in a second). With NFSdb you can also query these objects and replicate them over the network. Fast. Very, very fast.\r\n\r\n---\r\n\r\n##Why?\r\n\r\nStoring and querying data for Java developer is always pain in the neck. JDBC requires ORM tools, which is always a maintenance nightmare and performance hog. NoSQL databases are better but come with tricky installation and integration procedures and are not maintenance free either. We wanted to create a library that would help us to:\r\n\r\n- linear scalability in response to data volume increase.\r\n- throw away boilerplate persistence layer.\r\n- have clean, minimalistic API.\r\n- throw away caching because our database would be fast enough!\r\n- have minimal heap footprint.\r\n- leverage all of the available memory without using it for heap.\r\n- handle time series queries efficiently.\r\n- provide out of box support for temporal data.\r\n- scale processing out to multiple servers\r\n\r\n---\r\n\r\n##How?\r\n\r\nNFSdb provides automatic serialization for primitive types of POJOs to Memory Mapped Files. Files organised on disk in directories per class and files per attributes, providing column-based data store. String values can be indexed for fast searches and if your data has timestamp - it can be partitioned by DAY, MONTH or YEAR. Memory Mapped Files are managed by Operating System, which provides resilience in case of JVM crash and also a way of inter-process communication as data written by one process is immediately available to all other processes.\r\n\r\nNFSdb also provides easy to setup data replication over TCP/IP with automatic service discovery via multicast.\r\n\r\nThis is an example of fully functional data _publisher/server_:\r\n\r\n```java\r\npublic class SimpleReplicationServerMain {\r\n\r\n    private final String location;\r\n\r\n    public SimpleReplicationServerMain(String location) {\r\n        this.location = location;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        new SimpleReplicationServerMain(args[0]).start();\r\n    }\r\n\r\n    public void start() throws Exception {\r\n        JournalFactory factory = new JournalFactory(location);\r\n        JournalServer server = new JournalServer(factory);\r\n\r\n        JournalWriter<Price> writer = factory.writer(Price.class);\r\n        server.publish(writer);\r\n\r\n        server.start();\r\n\r\n        System.out.print(\"Publishing: \");\r\n        for (int i = 0; i < 10; i++) {\r\n            publishPrice(writer, 1000000);\r\n            Thread.sleep(TimeUnit.SECONDS.toMillis(2));\r\n            System.out.print(\".\");\r\n        }\r\n        System.out.println(\" [Done]\");\r\n    }\r\n\r\n    private void publishPrice(JournalWriter<Price> writer, int count) \r\n            throws JournalException {\r\n        long tZero = System.currentTimeMillis();\r\n        Price p = new Price();\r\n        for (int i = 0; i < count; i++) {\r\n            p.setTimestamp(tZero + i);\r\n            p.setSym(String.valueOf(i % 20));\r\n            p.setPrice(i * 1.04598 + i);\r\n            writer.append(p);\r\n        }\r\n        // commit triggers network publishing\r\n        writer.commit();\r\n    }\r\n}\r\n```\r\n\r\nAnd this is fully functional _client_:\r\n\r\n```java\r\npublic class SimpleReplicationClientMain {\r\n    public static void main(String[] args) throws Exception {\r\n        JournalFactory factory = new JournalFactory(args[0]);\r\n        JournalClient client = new JournalClient(factory);\r\n        client.subscribe(Price.class, null, \"price-copy\", new TxListener() {\r\n            @Override\r\n            public void onCommit() {\r\n                System.out.println(\"commit received\");\r\n            }\r\n        });\r\n        client.start();\r\n        System.out.println(\"Client started\");\r\n    }\r\n}\r\n```\r\n---\r\n\r\n### More examples?\r\n\r\nWe have more samples in our [Git repository] (https://github.com/NFSdb/nfsdb/tree/master/nfsdb-examples/src/main/java/org/nfsdb/examples) repository.\r\n\r\n### Performance\r\n\r\nOn test rig (Intel i7-920 @ 4Ghz) NFSdb shows average read latency of 20-30ns and write latency of 60ns per column of data. Read and write do not have any GC overhead.\r\n\r\n\r\n##Maven\r\n\r\nNFSdb requires minimum of Java 7 and stable release is available from maven Central:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.nfsdb</groupId>\r\n    <artifactId>nfsdb-core</artifactId>\r\n    <version>2.0.0</version>\r\n</dependency>\r\n```\r\n\r\nSnapshot releases are also available from Maven central. To get hold of those add these lines to pom.xml:\r\n\r\n```xml\r\n<repositories>\r\n    <repository>\r\n        <id>sonatype-snapshots</id>\r\n        <url>https://oss.sonatype.org/content/repositories/snapshots</url>\r\n    </repository>\r\n</repositories>\r\n\r\n<dependency>\r\n    <groupId>com.nfsdb</groupId>\r\n    <artifactId>nfsdb-core</artifactId>\r\n    <version>2.0.1-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n## License\r\n\r\nNFSdb is available under [Apache 2.0 License] (http://www.apache.org/licenses/LICENSE-2.0.txt)\r\n\r\n## Support\r\n\r\nFor support queries please raise an issue on GitHub:\r\n\r\nhttps://github.com/NFSdb/nfsdb/issues\r\n\r\nPlease visit our official web site [www.nfsdb.org] (http://nfsdb.org) for more information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}